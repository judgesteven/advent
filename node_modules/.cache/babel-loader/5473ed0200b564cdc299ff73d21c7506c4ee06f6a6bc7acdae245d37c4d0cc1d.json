{"ast":null,"code":"import axios from 'axios';\nimport { gameLayerConfig } from '../config/gameLayer';\nimport { MockGameLayerAPI } from './mockData';\n\n// Create axios instance with GameLayer configuration\nconst api = axios.create({\n  baseURL: gameLayerConfig.baseUrl,\n  headers: {\n    'Authorization': `Bearer ${gameLayerConfig.apiKey}`,\n    'Content-Type': 'application/json',\n    'X-Game-ID': gameLayerConfig.gameId,\n    'X-Client-ID': gameLayerConfig.clientId\n  }\n});\n\n// Check if we should use mock data (when API key is not provided)\nconst useMockData = !gameLayerConfig.apiKey || gameLayerConfig.apiKey === '';\n\n// API service class for GameLayer integration\nexport class GameLayerAPI {\n  // User Management\n  static async getCurrentUser() {\n    if (useMockData) {\n      return MockGameLayerAPI.getCurrentUser();\n    }\n    const response = await api.get('/user/profile');\n    return response.data;\n  }\n  static async loginUser(email, password) {\n    if (useMockData) {\n      return MockGameLayerAPI.loginUser(email, password);\n    }\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  }\n  static async registerUser(userData) {\n    if (useMockData) {\n      return MockGameLayerAPI.registerUser(userData);\n    }\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  }\n  static async updateUserProfile(updates) {\n    if (useMockData) {\n      // Mock implementation - just return updated user\n      const currentUser = await this.getCurrentUser();\n      return {\n        ...currentUser,\n        ...updates\n      };\n    }\n    const response = await api.patch('/user/profile', updates);\n    return response.data;\n  }\n\n  // Client Configuration\n  static async getClientConfig() {\n    if (useMockData) {\n      return MockGameLayerAPI.getClientConfig();\n    }\n    const response = await api.get(`/clients/${gameLayerConfig.clientId}/config`);\n    return response.data;\n  }\n\n  // Calendar and Tasks\n  static async getCalendarData(year = 2024, month = 12) {\n    if (useMockData) {\n      return MockGameLayerAPI.getCalendarData();\n    }\n    const response = await api.get(`/calendar/${year}/${month}`);\n    return response.data;\n  }\n  static async getTaskForDay(day) {\n    if (useMockData) {\n      return MockGameLayerAPI.getTaskForDay(day);\n    }\n    const response = await api.get(`/tasks/day/${day}`);\n    return response.data;\n  }\n  static async submitTaskCompletion(taskId, submission) {\n    if (useMockData) {\n      return MockGameLayerAPI.submitTaskCompletion(taskId, submission);\n    }\n    const response = await api.post(`/tasks/${taskId}/complete`, {\n      submission\n    });\n    return response.data;\n  }\n  static async getUserProgress() {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return {\n        completedDays: [1, 2, 3],\n        // Mock completed days\n        totalPoints: user.totalPoints,\n        badges: user.badges,\n        gems: user.gems\n      };\n    }\n    const response = await api.get('/user/progress');\n    return response.data;\n  }\n\n  // Badges and Achievements\n  static async getUserBadges() {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return user.badges;\n    }\n    const response = await api.get('/user/badges');\n    return response.data;\n  }\n  static async getAllBadges() {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return user.badges;\n    }\n    const response = await api.get('/badges');\n    return response.data;\n  }\n\n  // Leaderboard\n  static async getLeaderboard(limit = 50) {\n    if (useMockData) {\n      return MockGameLayerAPI.getLeaderboard();\n    }\n    const response = await api.get(`/leaderboard?limit=${limit}`);\n    return response.data;\n  }\n  static async getUserRank() {\n    if (useMockData) {\n      return {\n        rank: 2,\n        totalUsers: 150\n      }; // Mock rank\n    }\n    const response = await api.get('/user/rank');\n    return response.data;\n  }\n\n  // Rewards\n  static async getRewards() {\n    if (useMockData) {\n      return MockGameLayerAPI.getRewards();\n    }\n    const response = await api.get('/rewards');\n    return response.data;\n  }\n  static async purchaseReward(rewardId) {\n    if (useMockData) {\n      return MockGameLayerAPI.purchaseReward(rewardId);\n    }\n    const response = await api.post('/rewards/purchase', {\n      rewardId\n    });\n    return response.data;\n  }\n\n  // Analytics and Events\n  static async trackEvent(eventName, eventData) {\n    if (useMockData) {\n      return MockGameLayerAPI.trackEvent(eventName, eventData);\n    }\n    await api.post('/analytics/track', {\n      event: eventName,\n      data: eventData,\n      timestamp: new Date().toISOString()\n    });\n  }\n  static async getDailyStats() {\n    if (useMockData) {\n      return {\n        totalUsers: 150,\n        activeToday: 45,\n        tasksCompleted: 89\n      };\n    }\n    const response = await api.get('/analytics/daily-stats');\n    return response.data;\n  }\n}\n\n// Error handling wrapper\nexport const withErrorHandling = async apiCall => {\n  try {\n    return await apiCall();\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response4;\n    console.error('GameLayer API Error:', error);\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      // Handle authentication error\n      throw new Error('Authentication failed. Please log in again.');\n    } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n      // Handle authorization error\n      throw new Error('You don\\'t have permission to perform this action.');\n    } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 404) {\n      // Handle not found error\n      throw new Error('The requested resource was not found.');\n    } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500) {\n      // Handle server error\n      throw new Error('Server error. Please try again later.');\n    } else {\n      var _error$response5, _error$response5$data;\n      // Handle other errors\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'An unexpected error occurred.');\n    }\n  }\n};","map":{"version":3,"names":["axios","gameLayerConfig","MockGameLayerAPI","api","create","baseURL","baseUrl","headers","apiKey","gameId","clientId","useMockData","GameLayerAPI","getCurrentUser","response","get","data","loginUser","email","password","post","registerUser","userData","updateUserProfile","updates","currentUser","patch","getClientConfig","getCalendarData","year","month","getTaskForDay","day","submitTaskCompletion","taskId","submission","getUserProgress","user","completedDays","totalPoints","badges","gems","getUserBadges","getAllBadges","getLeaderboard","limit","getUserRank","rank","totalUsers","getRewards","purchaseReward","rewardId","trackEvent","eventName","eventData","event","timestamp","Date","toISOString","getDailyStats","activeToday","tasksCompleted","withErrorHandling","apiCall","error","_error$response","_error$response2","_error$response3","_error$response4","console","status","Error","_error$response5","_error$response5$data","message"],"sources":["/Users/stevenjudge/Desktop/AI/advent/advent-calendar/src/services/gameLayerApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { gameLayerConfig } from '../config/gameLayer';\nimport { User, Task, Badge, LeaderboardEntry, ClientConfig, CalendarDay, Reward } from '../types';\nimport { MockGameLayerAPI } from './mockData';\n\n// Create axios instance with GameLayer configuration\nconst api = axios.create({\n  baseURL: gameLayerConfig.baseUrl,\n  headers: {\n    'Authorization': `Bearer ${gameLayerConfig.apiKey}`,\n    'Content-Type': 'application/json',\n    'X-Game-ID': gameLayerConfig.gameId,\n    'X-Client-ID': gameLayerConfig.clientId\n  }\n});\n\n// Check if we should use mock data (when API key is not provided)\nconst useMockData = !gameLayerConfig.apiKey || gameLayerConfig.apiKey === '';\n\n// API service class for GameLayer integration\nexport class GameLayerAPI {\n  // User Management\n  static async getCurrentUser(): Promise<User> {\n    if (useMockData) {\n      return MockGameLayerAPI.getCurrentUser();\n    }\n    const response = await api.get('/user/profile');\n    return response.data;\n  }\n\n  static async loginUser(email: string, password: string): Promise<User> {\n    if (useMockData) {\n      return MockGameLayerAPI.loginUser(email, password);\n    }\n    const response = await api.post('/auth/login', { email, password });\n    return response.data;\n  }\n\n  static async registerUser(userData: { name: string; email: string; password: string }): Promise<User> {\n    if (useMockData) {\n      return MockGameLayerAPI.registerUser(userData);\n    }\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  }\n\n  static async updateUserProfile(updates: Partial<User>): Promise<User> {\n    if (useMockData) {\n      // Mock implementation - just return updated user\n      const currentUser = await this.getCurrentUser();\n      return { ...currentUser, ...updates };\n    }\n    const response = await api.patch('/user/profile', updates);\n    return response.data;\n  }\n\n  // Client Configuration\n  static async getClientConfig(): Promise<ClientConfig> {\n    if (useMockData) {\n      return MockGameLayerAPI.getClientConfig();\n    }\n    const response = await api.get(`/clients/${gameLayerConfig.clientId}/config`);\n    return response.data;\n  }\n\n  // Calendar and Tasks\n  static async getCalendarData(year: number = 2024, month: number = 12): Promise<CalendarDay[]> {\n    if (useMockData) {\n      return MockGameLayerAPI.getCalendarData();\n    }\n    const response = await api.get(`/calendar/${year}/${month}`);\n    return response.data;\n  }\n\n  static async getTaskForDay(day: number): Promise<Task> {\n    if (useMockData) {\n      return MockGameLayerAPI.getTaskForDay(day);\n    }\n    const response = await api.get(`/tasks/day/${day}`);\n    return response.data;\n  }\n\n  static async submitTaskCompletion(taskId: string, submission: any): Promise<{ success: boolean; points: number; badge?: Badge; gems: number }> {\n    if (useMockData) {\n      return MockGameLayerAPI.submitTaskCompletion(taskId, submission);\n    }\n    const response = await api.post(`/tasks/${taskId}/complete`, { submission });\n    return response.data;\n  }\n\n  static async getUserProgress(): Promise<{ completedDays: number[]; totalPoints: number; badges: Badge[]; gems: number }> {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return {\n        completedDays: [1, 2, 3], // Mock completed days\n        totalPoints: user.totalPoints,\n        badges: user.badges,\n        gems: user.gems\n      };\n    }\n    const response = await api.get('/user/progress');\n    return response.data;\n  }\n\n  // Badges and Achievements\n  static async getUserBadges(): Promise<Badge[]> {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return user.badges;\n    }\n    const response = await api.get('/user/badges');\n    return response.data;\n  }\n\n  static async getAllBadges(): Promise<Badge[]> {\n    if (useMockData) {\n      const user = await this.getCurrentUser();\n      return user.badges;\n    }\n    const response = await api.get('/badges');\n    return response.data;\n  }\n\n  // Leaderboard\n  static async getLeaderboard(limit: number = 50): Promise<LeaderboardEntry[]> {\n    if (useMockData) {\n      return MockGameLayerAPI.getLeaderboard();\n    }\n    const response = await api.get(`/leaderboard?limit=${limit}`);\n    return response.data;\n  }\n\n  static async getUserRank(): Promise<{ rank: number; totalUsers: number }> {\n    if (useMockData) {\n      return { rank: 2, totalUsers: 150 }; // Mock rank\n    }\n    const response = await api.get('/user/rank');\n    return response.data;\n  }\n\n  // Rewards\n  static async getRewards(): Promise<Reward[]> {\n    if (useMockData) {\n      return MockGameLayerAPI.getRewards();\n    }\n    const response = await api.get('/rewards');\n    return response.data;\n  }\n\n  static async purchaseReward(rewardId: string): Promise<{ success: boolean; message: string }> {\n    if (useMockData) {\n      return MockGameLayerAPI.purchaseReward(rewardId);\n    }\n    const response = await api.post('/rewards/purchase', { rewardId });\n    return response.data;\n  }\n\n  // Analytics and Events\n  static async trackEvent(eventName: string, eventData: any): Promise<void> {\n    if (useMockData) {\n      return MockGameLayerAPI.trackEvent(eventName, eventData);\n    }\n    await api.post('/analytics/track', {\n      event: eventName,\n      data: eventData,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  static async getDailyStats(): Promise<{ totalUsers: number; activeToday: number; tasksCompleted: number }> {\n    if (useMockData) {\n      return { totalUsers: 150, activeToday: 45, tasksCompleted: 89 };\n    }\n    const response = await api.get('/analytics/daily-stats');\n    return response.data;\n  }\n}\n\n// Error handling wrapper\nexport const withErrorHandling = async <T>(apiCall: () => Promise<T>): Promise<T> => {\n  try {\n    return await apiCall();\n  } catch (error: any) {\n    console.error('GameLayer API Error:', error);\n    \n    if (error.response?.status === 401) {\n      // Handle authentication error\n      throw new Error('Authentication failed. Please log in again.');\n    } else if (error.response?.status === 403) {\n      // Handle authorization error\n      throw new Error('You don\\'t have permission to perform this action.');\n    } else if (error.response?.status === 404) {\n      // Handle not found error\n      throw new Error('The requested resource was not found.');\n    } else if (error.response?.status >= 500) {\n      // Handle server error\n      throw new Error('Server error. Please try again later.');\n    } else {\n      // Handle other errors\n      throw new Error(error.response?.data?.message || 'An unexpected error occurred.');\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}