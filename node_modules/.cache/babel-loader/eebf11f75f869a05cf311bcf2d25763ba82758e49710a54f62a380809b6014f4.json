{"ast":null,"code":"var _jsxFileName = \"/Users/stevenjudge/Desktop/AI/advent/advent-calendar/src/context/AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { GameLayerAPI, withErrorHandling } from '../services/gameLayerApi';\nimport { mergeClientConfig } from '../config/gameLayer';\n\n// Action types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial state\nconst initialState = {\n  user: null,\n  calendar: [],\n  leaderboard: [],\n  rewards: [],\n  config: mergeClientConfig({}),\n  currentTask: null,\n  isLoading: false,\n  error: null\n};\n\n// Reducer\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'SET_CALENDAR':\n      return {\n        ...state,\n        calendar: action.payload\n      };\n    case 'SET_LEADERBOARD':\n      return {\n        ...state,\n        leaderboard: action.payload\n      };\n    case 'SET_REWARDS':\n      return {\n        ...state,\n        rewards: action.payload\n      };\n    case 'SET_CONFIG':\n      return {\n        ...state,\n        config: action.payload\n      };\n    case 'SET_CURRENT_TASK':\n      return {\n        ...state,\n        currentTask: action.payload\n      };\n    case 'UPDATE_CALENDAR_DAY':\n      return {\n        ...state,\n        calendar: state.calendar.map(day => day.day === action.payload.day ? {\n          ...day,\n          ...action.payload.updates\n        } : day)\n      };\n    case 'UPDATE_USER_PROGRESS':\n      return {\n        ...state,\n        user: state.user ? {\n          ...state.user,\n          totalPoints: action.payload.points,\n          gems: action.payload.gems,\n          badges: action.payload.badges\n        } : null\n      };\n    default:\n      return state;\n  }\n};\n\n// Context\n\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport const useApp = () => {\n  _s();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\n// Provider component\n_s(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AppProvider = ({\n  children\n}) => {\n  _s2();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Actions\n  const loadInitialData = async () => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      // Load client configuration\n      const config = await withErrorHandling(() => GameLayerAPI.getClientConfig());\n      dispatch({\n        type: 'SET_CONFIG',\n        payload: mergeClientConfig(config)\n      });\n\n      // Load calendar data\n      const calendar = await withErrorHandling(() => GameLayerAPI.getCalendarData());\n      dispatch({\n        type: 'SET_CALENDAR',\n        payload: calendar\n      });\n\n      // Load leaderboard\n      const leaderboard = await withErrorHandling(() => GameLayerAPI.getLeaderboard());\n      dispatch({\n        type: 'SET_LEADERBOARD',\n        payload: leaderboard\n      });\n\n      // Load rewards\n      const rewards = await withErrorHandling(() => GameLayerAPI.getRewards());\n      dispatch({\n        type: 'SET_REWARDS',\n        payload: rewards\n      });\n\n      // Load current user (mock data defaults to authenticated)\n      try {\n        const user = await withErrorHandling(() => GameLayerAPI.getCurrentUser());\n        dispatch({\n          type: 'SET_USER',\n          payload: user\n        });\n      } catch (error) {\n        // User not authenticated, continue without user data\n        console.log('User not authenticated:', error);\n      }\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const loginUser = async (email, password) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const user = await withErrorHandling(() => GameLayerAPI.loginUser(email, password));\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n\n      // Reload calendar with user progress\n      const calendar = await withErrorHandling(() => GameLayerAPI.getCalendarData());\n      dispatch({\n        type: 'SET_CALENDAR',\n        payload: calendar\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const registerUser = async userData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const user = await withErrorHandling(() => GameLayerAPI.registerUser(userData));\n      dispatch({\n        type: 'SET_USER',\n        payload: user\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const openCalendarDay = async day => {\n    try {\n      const task = await withErrorHandling(() => GameLayerAPI.getTaskForDay(day));\n      dispatch({\n        type: 'SET_CURRENT_TASK',\n        payload: task\n      });\n      dispatch({\n        type: 'UPDATE_CALENDAR_DAY',\n        payload: {\n          day,\n          updates: {\n            isUnlocked: true,\n            task\n          }\n        }\n      });\n\n      // Track event\n      await trackEvent('calendar_day_opened', {\n        day\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const completeTask = async (taskId, submission) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const result = await withErrorHandling(() => GameLayerAPI.submitTaskCompletion(taskId, submission));\n      if (result.success) {\n        // Update user progress\n        const currentUser = state.user;\n        if (currentUser) {\n          dispatch({\n            type: 'UPDATE_USER_PROGRESS',\n            payload: {\n              points: currentUser.totalPoints + result.points,\n              gems: currentUser.gems + result.gems,\n              badges: result.badge ? [...currentUser.badges, result.badge] : currentUser.badges\n            }\n          });\n        }\n\n        // Mark calendar day as completed\n        const currentTask = state.currentTask;\n        if (currentTask) {\n          const calendarDay = state.calendar.find(d => {\n            var _d$task;\n            return ((_d$task = d.task) === null || _d$task === void 0 ? void 0 : _d$task.id) === taskId;\n          });\n          if (calendarDay) {\n            dispatch({\n              type: 'UPDATE_CALENDAR_DAY',\n              payload: {\n                day: calendarDay.day,\n                updates: {\n                  isCompleted: true\n                }\n              }\n            });\n          }\n        }\n\n        // Clear current task\n        dispatch({\n          type: 'SET_CURRENT_TASK',\n          payload: null\n        });\n\n        // Refresh leaderboard\n        await refreshLeaderboard();\n\n        // Track event\n        await trackEvent('task_completed', {\n          taskId,\n          points: result.points,\n          gems: result.gems\n        });\n      }\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    }\n  };\n  const refreshLeaderboard = async () => {\n    try {\n      const leaderboard = await withErrorHandling(() => GameLayerAPI.getLeaderboard());\n      dispatch({\n        type: 'SET_LEADERBOARD',\n        payload: leaderboard\n      });\n    } catch (error) {\n      console.error('Failed to refresh leaderboard:', error.message);\n    }\n  };\n  const trackEvent = async (eventName, eventData) => {\n    try {\n      await withErrorHandling(() => GameLayerAPI.trackEvent(eventName, eventData));\n    } catch (error) {\n      console.error('Failed to track event:', error.message);\n    }\n  };\n\n  // Load initial data on mount\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n  const contextValue = {\n    state,\n    actions: {\n      loadInitialData,\n      loginUser,\n      registerUser,\n      openCalendarDay,\n      completeTask,\n      refreshLeaderboard,\n      trackEvent\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 10\n  }, this);\n};\n_s2(AppProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","GameLayerAPI","withErrorHandling","mergeClientConfig","jsxDEV","_jsxDEV","initialState","user","calendar","leaderboard","rewards","config","currentTask","isLoading","error","appReducer","state","action","type","payload","map","day","updates","totalPoints","points","gems","badges","AppContext","undefined","useApp","_s","context","Error","AppProvider","children","_s2","dispatch","loadInitialData","getClientConfig","getCalendarData","getLeaderboard","getRewards","getCurrentUser","console","log","message","loginUser","email","password","registerUser","userData","openCalendarDay","task","getTaskForDay","isUnlocked","trackEvent","completeTask","taskId","submission","result","submitTaskCompletion","success","currentUser","badge","calendarDay","find","d","_d$task","id","isCompleted","refreshLeaderboard","eventName","eventData","contextValue","actions","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stevenjudge/Desktop/AI/advent/advent-calendar/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { AppState, User, CalendarDay, LeaderboardEntry, Task, ClientConfig, Reward } from '../types';\nimport { GameLayerAPI, withErrorHandling } from '../services/gameLayerApi';\nimport { mergeClientConfig } from '../config/gameLayer';\n\n// Action types\ntype AppAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_USER'; payload: User | null }\n  | { type: 'SET_CALENDAR'; payload: CalendarDay[] }\n  | { type: 'SET_LEADERBOARD'; payload: LeaderboardEntry[] }\n  | { type: 'SET_REWARDS'; payload: Reward[] }\n  | { type: 'SET_CONFIG'; payload: ClientConfig }\n  | { type: 'SET_CURRENT_TASK'; payload: Task | null }\n  | { type: 'UPDATE_CALENDAR_DAY'; payload: { day: number; updates: Partial<CalendarDay> } }\n  | { type: 'UPDATE_USER_PROGRESS'; payload: { points: number; gems: number; badges: any[] } };\n\n// Initial state\nconst initialState: AppState = {\n  user: null,\n  calendar: [],\n  leaderboard: [],\n  rewards: [],\n  config: mergeClientConfig({}),\n  currentTask: null,\n  isLoading: false,\n  error: null,\n};\n\n// Reducer\nconst appReducer = (state: AppState, action: AppAction): AppState => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isLoading: false };\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'SET_CALENDAR':\n      return { ...state, calendar: action.payload };\n    case 'SET_LEADERBOARD':\n      return { ...state, leaderboard: action.payload };\n    case 'SET_REWARDS':\n      return { ...state, rewards: action.payload };\n    case 'SET_CONFIG':\n      return { ...state, config: action.payload };\n    case 'SET_CURRENT_TASK':\n      return { ...state, currentTask: action.payload };\n    case 'UPDATE_CALENDAR_DAY':\n      return {\n        ...state,\n        calendar: state.calendar.map(day =>\n          day.day === action.payload.day\n            ? { ...day, ...action.payload.updates }\n            : day\n        ),\n      };\n    case 'UPDATE_USER_PROGRESS':\n      return {\n        ...state,\n        user: state.user\n          ? {\n              ...state.user,\n              totalPoints: action.payload.points,\n              gems: action.payload.gems,\n              badges: action.payload.badges,\n            }\n          : null,\n      };\n    default:\n      return state;\n  }\n};\n\n// Context\ninterface AppContextType {\n  state: AppState;\n  actions: {\n    loadInitialData: () => Promise<void>;\n    loginUser: (email: string, password: string) => Promise<void>;\n    registerUser: (userData: { name: string; email: string; password: string }) => Promise<void>;\n    openCalendarDay: (day: number) => Promise<void>;\n    completeTask: (taskId: string, submission: any) => Promise<void>;\n    refreshLeaderboard: () => Promise<void>;\n    trackEvent: (eventName: string, eventData: any) => Promise<void>;\n  };\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\n// Provider component\ninterface AppProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Actions\n  const loadInitialData = async () => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      // Load client configuration\n      const config = await withErrorHandling(() => GameLayerAPI.getClientConfig());\n      dispatch({ type: 'SET_CONFIG', payload: mergeClientConfig(config) });\n\n      // Load calendar data\n      const calendar = await withErrorHandling(() => GameLayerAPI.getCalendarData());\n      dispatch({ type: 'SET_CALENDAR', payload: calendar });\n\n      // Load leaderboard\n      const leaderboard = await withErrorHandling(() => GameLayerAPI.getLeaderboard());\n      dispatch({ type: 'SET_LEADERBOARD', payload: leaderboard });\n\n      // Load rewards\n      const rewards = await withErrorHandling(() => GameLayerAPI.getRewards());\n      dispatch({ type: 'SET_REWARDS', payload: rewards });\n\n      // Load current user (mock data defaults to authenticated)\n      try {\n        const user = await withErrorHandling(() => GameLayerAPI.getCurrentUser());\n        dispatch({ type: 'SET_USER', payload: user });\n      } catch (error) {\n        // User not authenticated, continue without user data\n        console.log('User not authenticated:', error);\n      }\n\n      dispatch({ type: 'SET_LOADING', payload: false });\n    } catch (error: any) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const loginUser = async (email: string, password: string) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const user = await withErrorHandling(() => GameLayerAPI.loginUser(email, password));\n      dispatch({ type: 'SET_USER', payload: user });\n      dispatch({ type: 'SET_LOADING', payload: false });\n      \n      // Reload calendar with user progress\n      const calendar = await withErrorHandling(() => GameLayerAPI.getCalendarData());\n      dispatch({ type: 'SET_CALENDAR', payload: calendar });\n    } catch (error: any) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const registerUser = async (userData: { name: string; email: string; password: string }) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const user = await withErrorHandling(() => GameLayerAPI.registerUser(userData));\n      dispatch({ type: 'SET_USER', payload: user });\n      dispatch({ type: 'SET_LOADING', payload: false });\n    } catch (error: any) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const openCalendarDay = async (day: number) => {\n    try {\n      const task = await withErrorHandling(() => GameLayerAPI.getTaskForDay(day));\n      dispatch({ type: 'SET_CURRENT_TASK', payload: task });\n      dispatch({ type: 'UPDATE_CALENDAR_DAY', payload: { day, updates: { isUnlocked: true, task } } });\n      \n      // Track event\n      await trackEvent('calendar_day_opened', { day });\n    } catch (error: any) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const completeTask = async (taskId: string, submission: any) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const result = await withErrorHandling(() => GameLayerAPI.submitTaskCompletion(taskId, submission));\n      \n      if (result.success) {\n        // Update user progress\n        const currentUser = state.user;\n        if (currentUser) {\n          dispatch({\n            type: 'UPDATE_USER_PROGRESS',\n            payload: {\n              points: currentUser.totalPoints + result.points,\n              gems: currentUser.gems + result.gems,\n              badges: result.badge ? [...currentUser.badges, result.badge] : currentUser.badges,\n            },\n          });\n        }\n\n        // Mark calendar day as completed\n        const currentTask = state.currentTask;\n        if (currentTask) {\n          const calendarDay = state.calendar.find(d => d.task?.id === taskId);\n          if (calendarDay) {\n            dispatch({\n              type: 'UPDATE_CALENDAR_DAY',\n              payload: { day: calendarDay.day, updates: { isCompleted: true } },\n            });\n          }\n        }\n\n        // Clear current task\n        dispatch({ type: 'SET_CURRENT_TASK', payload: null });\n\n        // Refresh leaderboard\n        await refreshLeaderboard();\n\n        // Track event\n        await trackEvent('task_completed', { taskId, points: result.points, gems: result.gems });\n      }\n\n      dispatch({ type: 'SET_LOADING', payload: false });\n    } catch (error: any) {\n      dispatch({ type: 'SET_ERROR', payload: error.message });\n    }\n  };\n\n  const refreshLeaderboard = async () => {\n    try {\n      const leaderboard = await withErrorHandling(() => GameLayerAPI.getLeaderboard());\n      dispatch({ type: 'SET_LEADERBOARD', payload: leaderboard });\n    } catch (error: any) {\n      console.error('Failed to refresh leaderboard:', error.message);\n    }\n  };\n\n  const trackEvent = async (eventName: string, eventData: any) => {\n    try {\n      await withErrorHandling(() => GameLayerAPI.trackEvent(eventName, eventData));\n    } catch (error: any) {\n      console.error('Failed to track event:', error.message);\n    }\n  };\n\n  // Load initial data on mount\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  const contextValue: AppContextType = {\n    state,\n    actions: {\n      loadInitialData,\n      loginUser,\n      registerUser,\n      openCalendarDay,\n      completeTask,\n      refreshLeaderboard,\n      trackEvent,\n    },\n  };\n\n  return <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}